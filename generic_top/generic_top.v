
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module generic_top(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7,

	//////////// LCD //////////
	output		          		LCD_BLON,
	inout 		     [7:0]		LCD_DATA,
	output		          		LCD_EN,
	output		          		LCD_ON,
	output		          		LCD_RS,
	output		          		LCD_RW,

	//////////// RS232 //////////
	input 		          		UART_CTS,
	output		          		UART_RTS,
	input 		          		UART_RXD,
	output		          		UART_TXD,

	//////////// PS2 for Keyboard and Mouse //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [31:0]		DRAM_DQ,
	output		     [3:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N,

	//////////// Flash //////////
	output		    [22:0]		FL_ADDR,
	output		          		FL_CE_N,
	inout 		     [7:0]		FL_DQ,
	output		          		FL_OE_N,
	output		          		FL_RST_N,
	input 		          		FL_RY,
	output		          		FL_WE_N,
	output		          		FL_WP_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

///////////////////////////
// clock wires
///////////////////////////
wire CLOCK_25M;
wire CLOCK_16M;
wire CLOCK_10K;

///////////////////////////
// Sprite Animation
///////////////////////////
wire move;
reg [7:0]dataOut;
wire [8:0]dataOut1;
wire [7:0]dataOut2;
wire enInit;
wire enLine;
wire lineDone;
wire initDone;
wire start;
wire dc;
wire clkHold;
wire dataHold;
wire spiData;
wire spiClk;
wire idle;
wire drawCanvas;
wire [18:0]colorCount;
reg [15:0]color;
wire [7:0]x1, x2;
wire [8:0]y1, y2;


wire [3:0] dir;
wire walking;



///////////////////////////
// LSFR wires
///////////////////////////
wire [19:0]random;
wire [19:0]randOut;

///////////////////////////
// Sound wires
///////////////////////////
wire [5:0]note;
wire [17:0]freqDiv;
wire pulse;

//=======================================================
//  Structural coding
//=======================================================
assign GPIO[3] = dataOut1[8] | dc;
assign GPIO[7] = idle ?  1'b1 : (spiClk | ~clkHold);
//assign GPIO[1] = idle ?  1'b1 : (spiData | dataHold);
assign LEDG[0] = lineDone;
assign LEDG[1] = initDone;



assign LEDR[3:0] = dir;

always @ (*)
	if (enInit) 
		if (dataHold)
			dataOut = 8'hFF;
		else
			dataOut = dataOut2;
	else if (enLine)
		dataOut = dataOut1[7:0];
	else
		dataOut = 8'hFF;

PLL	PLL_inst (
	.inclk0 ( CLOCK2_50 ),
	.c0 (CLOCK_25M),
	.c1 (CLOCK_16M),
	.c2 (CLOCK_10K)
);

////////////////////////////////////
//	LCD Modules
////////////////////////////////////
Sprite_Controller u0(
		.colorCount(colorCount[18:1]),
		.dir(dir),
		.canvas(drawCanvas),
		.clk(CLOCK_25M),
		.x1(x1), 
		.x2(x2),
		.y1(y1), 
		.y2(y2),
		.walkSig(walking),
		.colorOut(color)
);

LCDController u1 (
				.goLine((|dir)),
				.doneLine(lineDone),
				.doneInit(initDone),
				.drawCanvas(drawCanvas),
				.clk(CLOCK_25M),
				.enLine(enLine),
				.enInit(enInit),
				.idle(idle)
);

sendByteSPI u2(
				.clk( CLOCK_25M ),
				.go(~lineDone | ~initDone),
				.done(move),
				.dIn(dataOut),
				.clkOut(spiClk),
				.dOut(GPIO[5])
);

init u3	(
				.resetOut(GPIO[1]),
				.move(move & enInit),
				.done(initDone),
				.dc(dc),
				.clkHold(clkHold),
				.dataHold(dataHold),
				.dOut(dataOut2)
);


DrawLine u4 (
				.move(move & enLine),
				.x1(x1), 	//start X
				.x2(x2),	 	//end X
				.y1(y1), 		//start Y
				.y2(y2),		//end Y
				.color(color),	//Color being displayed
				.done(lineDone),
				.dout(dataOut1),
				.colorCount(colorCount)
);

InputController u5(
					.CLOCK_50(CLOCK_50),
					.PS2_CLK(PS2_CLK),
					.touchClk(GPIO[33]),
					.dataIn(GPIO[34]), 
					.dataOut(GPIO[35]),
					.PS2_DAT(PS2_DAT),
					.ascii(LEDR[17:10]),
					.dir(dir)
);

	
//////////////////////////////
// LSFR Modules
//////////////////////////////
assign LEDG[8] = (randOut > 996146)? 0 : 1; //10% chance

rngGenerator u31 (
			.clk(CLOCK_50),
			.en(1),
			.load(enInit),
			.seed(5'b10101),
			.dataOut(random)
);

pollREG u32 (
			.en(walking),
			.dataIn(random),
			.dataOut(randOut)
);

//////////////////////////////
// Sound Modules
//////////////////////////////

//soundDecoder u41 (	.clk(CLOCK_16M),
//						.note(note),
//						.freqDivider(freqDiv));
//						
//PulseOut u42 ( .clk(CLOCK_16M),
//				  .countValue(freqDiv),
//	           .pulseOut(pulse));
//
//music_overworld (
//			.play(SW[1]),
//			.rst(),
//			.clk(CLOCK_10K),
//			.note() 
//);		  


endmodule
