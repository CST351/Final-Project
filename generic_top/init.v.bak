module init (
	input wire move, start,
	output reg [17:0] LEDR,
	output reg en, dc, reset,
	output reg [7:0] dout);
	
	/*localparam A1=5'b00001,A2=5'b00010,A3=5'b00011,A4=5'b00100,A5=5'b00101,A6=5'b00110,A7=5'b00111,A8=5'b01000,A9=5'b01001,A10=5'b01010,A11=5'b01011,A12=5'b01100,
	A13=5'b01101,A14=5'b01110,A15=5'b01111,A16=5'b10000,A17=5'b10001,A18=5'b10010,A19=5'b10011,A20=5'b10100;
	reg [5:0] state;
	localparam A0=6'b00000000,	A1=6'b00000001,A2=6'b00000010,A3=6'b00000011,A4=6'b00000100,A5=6'b00000101,A6=6'b00000110,Â A7=6'b00000111,A8=6'b00001000,A9=6'b00001001,A10=6'b00001010,
	A11=6'b00001011,A12=6'b00001100,A13=6'b00001101,A14=6'b00001110,A15=6'b00001111,A16=6'b00010000,A17=6'b00010001,A18=6'b00010010,A19=6'b00010011,A20=6'b00010100,A21=6'b00010101,
	A22=6'b00010110,A23=6'b00010111,A24=6'b00011000,A25=6'b00011001,A26=6'b00011010,A27=6'b00011011,A28=6'b00011100,A29=6'b00011101,A30=6'b00011110,A31=6'b00011111,A32=6'b00100000,
	A33=6'b00100001,A34=6'b00100010,A35=6'b00100011,A36=6'b00100100,A37=6'b00100101,A38=6'b00100110,A39=6'b00100111,A40=6'b00101000,A41=6'b00101001,A42=6'b00101010,A43=6'b00101011,
	A44=6'b00101100,A45=6'b00101101,A46=6'b00101110,A47=6'b00101111,A48=6'b00110000,A49=6'b00110001,A50=6'b00110010;*/
	
	reg [8:0] ra [46:0];
	reg [5:0] count, reset_counter;	
	
	//assign LEDR = count;
 
	initial 
	begin
		ra[6'b000000] = 9'b000101001;	// 29
		ra[6'b000001] = 9'b000101100;	// 2c
		ra[6'b000010] = 9'b011001011;	// cb
		ra[6'b000011] = 9'b100111001;	// 39
		ra[6'b000100] = 9'b100101100;	// 2c
		ra[6'b000101] = 9'b100000000;	// 00
		ra[6'b000110] = 9'b100110100;	// 34
		ra[6'b000111] = 9'b100000010;	// 02
		ra[6'b001000] = 9'b011001111;	// cf
		ra[6'b001001] = 9'b100000000;	// 00
		ra[6'b001010] = 9'b111000001;	// c1
		ra[6'b001011] = 9'b100110000;	// 30
		ra[6'b001100] = 9'b011101000;	// e8
		ra[6'b001101] = 9'b110000101;	// 85
		ra[6'b001110] = 9'b100000000;	// 00
		ra[6'b001111] = 9'b101111000;	// 78
		ra[6'b010000] = 9'b011101010;	// ea
		ra[6'b010001] = 9'b100000000;	// 00
		ra[6'b010010] = 9'b100000000;	// 00
		ra[6'b010011] = 9'b011101101;	// ed
		ra[6'b010100] = 9'b101100100;	// 64
		ra[6'b010101] = 9'b100000011;	// 03
		ra[6'b010110] = 9'b100010010;	// 12
		ra[6'b010111] = 9'b110000001;	// 81
		ra[6'b011000] = 9'b011110111;	// f7
		ra[6'b011001] = 9'b100100000;	// 20
		ra[6'b011010] = 9'b011000000;	// c0
		ra[6'b011011] = 9'b100100011;	// 23
		ra[6'b011100] = 9'b011000001;	// c1
		ra[6'b011101] = 9'b100010000;	// 10
		ra[6'b011110] = 9'b011000101;	// c5
		ra[6'b011111] = 9'b100111110;	// 3e
		ra[6'b100000] = 9'b100101000;	// 28
		ra[6'b100001] = 9'b011000111;	// c7
		ra[6'b100010] = 9'b110000110;	// 86
		ra[6'b100011] = 9'b000110110;	// 36
		ra[6'b100100] = 9'b101001000;	// 48
		ra[6'b100101] = 9'b000111010;	// 3a
		ra[6'b100110] = 9'b101010101;	// 55
		ra[6'b100111] = 9'b010110001;	// b1
		ra[6'b101000] = 9'b100000000;	// 00
		ra[6'b101001] = 9'b100011000;	// 18
		ra[6'b101010] = 9'b010110110;	// b6
		ra[6'b101011] = 9'b100001000;	// 08
		ra[6'b101100] = 9'b110000010;	// 82
		ra[6'b101101] = 9'b100100111;	// 27
		ra[6'b101110] = 9'b000010001;	// 11
		
		//count = 6'b000000;
	end
	
	/*always @ (posedge start)
	begin 
		dout = ra[0] [7:0];
		dc = ra[0] [8];
		en = 1'b1;
		reset = 1'b1;
	end*/
	
	always @ (posedge move)
	begin
		if (count < 6'b101111)
		begin		
			if (count == 2 && reset_counter < 55)
				begin
					LEDR = reset_counter;
					reset_counter = reset_counter + 1'b1;
					reset = 1'b0;
					en = 1'b1;
					dout = 1'b1;
					dc = 1'b0;
					count = count;
				end
				else
				begin
					LEDR = count;
					dout = ra[count] [7:0];	
					dc = ra[count] [8];
					count = count + 1;
					reset = 1'b1;
					en = 1'b1;
					reset_counter = reset_counter;
				end
			end
			else
			begin
				LEDR = 18'b111111101111111111;
				count = count;
				reset_counter = reset_counter;
				en = 1'b0;
			end
	end
endmodule
